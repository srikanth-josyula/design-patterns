Abstract Factory is a creational design pattern that lets you produce families of 
related objects without specifying their concrete classes.

*************************
		Problem
*************************
1. family of related products, say: Chair + Sofa + CoffeeTable.
2. Several variants of this family. For example, products Chair + Sofa + CoffeeTable 
	are available in these variants: Modern, Victorian, ArtDeco.
3. You need a way to create individual furniture objects so that they match other objects of the same family. 
4. Also, you don’t want to change existing code when adding new products or families of products to the program.

*************************
		Solution
*************************
1. explicitly declare interfaces for each distinct product of the product family (e.g., chair, sofa or coffee table)
2. Then you can make all variants of products follow those interfaces. For example, all chair variants can implement the Chair interface; 
	all coffee table variants can implement the CoffeeTable interface, and so on.
3. Declare the Abstract Factory—an interface with a list of creation methods 
	for all products that are part of the product family (for example, createChair, createSofa and createCoffeeTable).